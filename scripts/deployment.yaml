apiVersion: apps/v1
kind: Deployment
metadata:
  name: benchmark-app
  labels:
    app: benchmark-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: benchmark-app
  template:
    metadata:
      labels:
        app: benchmark-app
    spec:
      containers:
      - name: benchmark-app
        image: stoneann5490/demonfaas-benchmark-app-kubernetes:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
        - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: benchmark-app-service
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8080"  # Replace with your service's port
    prometheus.io/path: "/metrics"  # Replace if the metrics endpoint is different

spec:
  selector:
    app: benchmark-app
  ports:
    - name: http-web
      protocol: TCP
      port: 8000
      targetPort: 8000
    - name: prometheus-scraper
      protocol: TCP
      port: 8080    # Expose the metrics port
      targetPort: 8080
  type: ClusterIP
  # clusterIP: None

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-db
  labels:
    app: postgres-db
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres-db
  template:
    metadata:
      labels:
        app: postgres-db
    spec:
      containers:
        - name: postgres
          image: postgres:13
          env:
            - name: POSTGRES_DB
              value: "db"
            - name: POSTGRES_USER
              value: "postgres"
            - name: POSTGRES_PASSWORD
              value: "postgres_pass"
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: postgres-init-sql
              mountPath: /docker-entrypoint-initdb.d/  # This will run the init.sql on startup
            - name: postgres-insert-sql
              mountPath: /docker-entrypoint-insertdb.d/  # This will run the init.sql on startup
      volumes:
        - name: postgres-init-sql
          configMap:
            name: postgres-init-sql  # Referring to the ConfigMap with the SQL file
        - name: postgres-insert-sql
          configMap:
            name: postgres-insert-sql  # Referring to the ConfigMap with the SQL file

---
apiVersion: v1
kind: Service
metadata:
  name: postgres-db-service
spec:
  selector:
    app: postgres-db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
---

# kubectl create configmap postgres-insert-sql --from-file=insert.sql
# kubectl create configmap postgres-init-sql --from-file=insert.sql